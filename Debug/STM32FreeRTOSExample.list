
STM32FreeRTOSExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080028b0  080028b0  000038b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002934  08002934  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002934  08002934  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002934  08002934  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002934  08002934  00003934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002938  08002938  00003938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800293c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d4  20000010  0800294c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049e4  0800294c  000049e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000595e  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e8  00000000  00000000  00009997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005db  00000000  00000000  0000ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e4d  00000000  00000000  0000c04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007834  00000000  00000000  0001ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066f88  00000000  00000000  000266cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef8  00000000  00000000  0008d698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0008f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002898 	.word	0x08002898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002898 	.word	0x08002898

08000150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	f003 0307 	and.w	r3, r3, #7
 800015e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000160:	4b0c      	ldr	r3, [pc, #48]	@ (8000194 <__NVIC_SetPriorityGrouping+0x44>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000166:	68ba      	ldr	r2, [r7, #8]
 8000168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800016c:	4013      	ands	r3, r2
 800016e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800017c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000182:	4a04      	ldr	r2, [pc, #16]	@ (8000194 <__NVIC_SetPriorityGrouping+0x44>)
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	60d3      	str	r3, [r2, #12]
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	e000ed00 	.word	0xe000ed00

08000198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__NVIC_GetPriorityGrouping+0x18>)
 800019e:	68db      	ldr	r3, [r3, #12]
 80001a0:	0a1b      	lsrs	r3, r3, #8
 80001a2:	f003 0307 	and.w	r3, r3, #7
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	db0b      	blt.n	80001de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f003 021f 	and.w	r2, r3, #31
 80001cc:	4906      	ldr	r1, [pc, #24]	@ (80001e8 <__NVIC_EnableIRQ+0x34>)
 80001ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d2:	095b      	lsrs	r3, r3, #5
 80001d4:	2001      	movs	r0, #1
 80001d6:	fa00 f202 	lsl.w	r2, r0, r2
 80001da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	e000e100 	.word	0xe000e100

080001ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	db0a      	blt.n	8000216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	b2da      	uxtb	r2, r3
 8000204:	490c      	ldr	r1, [pc, #48]	@ (8000238 <__NVIC_SetPriority+0x4c>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	0112      	lsls	r2, r2, #4
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	440b      	add	r3, r1
 8000210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000214:	e00a      	b.n	800022c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4908      	ldr	r1, [pc, #32]	@ (800023c <__NVIC_SetPriority+0x50>)
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	f003 030f 	and.w	r3, r3, #15
 8000222:	3b04      	subs	r3, #4
 8000224:	0112      	lsls	r2, r2, #4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	440b      	add	r3, r1
 800022a:	761a      	strb	r2, [r3, #24]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000e100 	.word	0xe000e100
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000240:	b480      	push	{r7}
 8000242:	b089      	sub	sp, #36	@ 0x24
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	f003 0307 	and.w	r3, r3, #7
 8000252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000254:	69fb      	ldr	r3, [r7, #28]
 8000256:	f1c3 0307 	rsb	r3, r3, #7
 800025a:	2b04      	cmp	r3, #4
 800025c:	bf28      	it	cs
 800025e:	2304      	movcs	r3, #4
 8000260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	3304      	adds	r3, #4
 8000266:	2b06      	cmp	r3, #6
 8000268:	d902      	bls.n	8000270 <NVIC_EncodePriority+0x30>
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3b03      	subs	r3, #3
 800026e:	e000      	b.n	8000272 <NVIC_EncodePriority+0x32>
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	f04f 32ff 	mov.w	r2, #4294967295
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	fa02 f303 	lsl.w	r3, r2, r3
 800027e:	43da      	mvns	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	401a      	ands	r2, r3
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000288:	f04f 31ff 	mov.w	r1, #4294967295
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	43d9      	mvns	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	4313      	orrs	r3, r2
         );
}
 800029a:	4618      	mov	r0, r3
 800029c:	3724      	adds	r7, #36	@ 0x24
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <LL_RCC_HSI_Enable+0x18>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a03      	ldr	r2, [pc, #12]	@ (80002bc <LL_RCC_HSI_Enable+0x18>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <LL_RCC_HSI_IsReady+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4903      	ldr	r1, [pc, #12]	@ (8000308 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002fa:	4313      	orrs	r3, r2
 80002fc:	600b      	str	r3, [r1, #0]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <LL_RCC_SetSysClkSource+0x24>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f023 0203 	bic.w	r2, r3, #3
 800031c:	4904      	ldr	r1, [pc, #16]	@ (8000330 <LL_RCC_SetSysClkSource+0x24>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	604b      	str	r3, [r1, #4]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000

08000334 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000338:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <LL_RCC_GetSysClkSource+0x14>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	f003 030c 	and.w	r3, r3, #12
}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <LL_RCC_SetAHBPrescaler+0x24>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800035c:	4904      	ldr	r1, [pc, #16]	@ (8000370 <LL_RCC_SetAHBPrescaler+0x24>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4313      	orrs	r3, r2
 8000362:	604b      	str	r3, [r1, #4]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <LL_RCC_SetAPB1Prescaler+0x24>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000384:	4904      	ldr	r1, [pc, #16]	@ (8000398 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4313      	orrs	r3, r2
 800038a:	604b      	str	r3, [r1, #4]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80003ac:	4904      	ldr	r1, [pc, #16]	@ (80003c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	604b      	str	r3, [r1, #4]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003cc:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ce:	69da      	ldr	r2, [r3, #28]
 80003d0:	4907      	ldr	r1, [pc, #28]	@ (80003f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003da:	69da      	ldr	r2, [r3, #28]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4013      	ands	r3, r2
 80003e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003e2:	68fb      	ldr	r3, [r7, #12]
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003fc:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	4907      	ldr	r1, [pc, #28]	@ (8000420 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4313      	orrs	r3, r2
 8000406:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <LL_APB2_GRP1_EnableClock+0x2c>)
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4013      	ands	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000412:	68fb      	ldr	r3, [r7, #12]
}
 8000414:	bf00      	nop
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <LL_FLASH_SetLatency+0x24>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f023 0207 	bic.w	r2, r3, #7
 8000434:	4904      	ldr	r1, [pc, #16]	@ (8000448 <LL_FLASH_SetLatency+0x24>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4313      	orrs	r3, r2
 800043a:	600b      	str	r3, [r1, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40022000 	.word	0x40022000

0800044c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <LL_FLASH_GetLatency+0x14>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0307 	and.w	r3, r3, #7
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40022000 	.word	0x40022000

08000464 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	60da      	str	r2, [r3, #12]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	615a      	str	r2, [r3, #20]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	43da      	mvns	r2, r3
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	0a1b      	lsrs	r3, r3, #8
 80004c0:	4013      	ands	r3, r2
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	bf0c      	ite	eq
 80004c8:	2301      	moveq	r3, #1
 80004ca:	2300      	movne	r3, #0
 80004cc:	b2db      	uxtb	r3, r3
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	615a      	str	r2, [r3, #20]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b085      	sub	sp, #20
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	b29b      	uxth	r3, r3
 800050c:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4013      	ands	r3, r2
 8000514:	041a      	lsls	r2, r3, #16
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	43d9      	mvns	r1, r3
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	400b      	ands	r3, r1
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	611a      	str	r2, [r3, #16]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800053c:	4a03      	ldr	r2, [pc, #12]	@ (800054c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000542:	6053      	str	r3, [r2, #4]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40010000 	.word	0x40010000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff ff4c 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800055c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000560:	f7ff ff30 	bl	80003c4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f7ff fdf3 	bl	8000150 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800056a:	f7ff fe15 	bl	8000198 <__NVIC_GetPriorityGrouping>
 800056e:	4603      	mov	r3, r0
 8000570:	2200      	movs	r2, #0
 8000572:	210f      	movs	r1, #15
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe63 	bl	8000240 <NVIC_EncodePriority>
 800057a:	4603      	mov	r3, r0
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 30ff 	mov.w	r0, #4294967295
 8000582:	f7ff fe33 	bl	80001ec <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000586:	f7ff ffd3 	bl	8000530 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f82d 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8c3 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f85b 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTStdioConfig(USART2,true);
 8000596:	2101      	movs	r1, #1
 8000598:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <main+0x80>)
 800059a:	f001 fdaf 	bl	80020fc <UARTStdioConfig>
  xTaskCreate(Status_Led_Task, "statusLEDTask",configMINIMAL_STACK_SIZE, NULL, 1, &status_task_Handle);
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <main+0x84>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	490b      	ldr	r1, [pc, #44]	@ (80005d8 <main+0x88>)
 80005ac:	480b      	ldr	r0, [pc, #44]	@ (80005dc <main+0x8c>)
 80005ae:	f000 fd3d 	bl	800102c <xTaskCreate>
  xTaskCreate(Switch_Task, "switchTask",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	@ 0x80
 80005be:	4908      	ldr	r1, [pc, #32]	@ (80005e0 <main+0x90>)
 80005c0:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <main+0x94>)
 80005c2:	f000 fd33 	bl	800102c <xTaskCreate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 80005c6:	f000 fe95 	bl	80012f4 <vTaskStartScheduler>
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x7a>
 80005ce:	bf00      	nop
 80005d0:	40004400 	.word	0x40004400
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	080028b0 	.word	0x080028b0
 80005dc:	08000771 	.word	0x08000771
 80005e0:	080028c0 	.word	0x080028c0
 80005e4:	080007b9 	.word	0x080007b9

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff ff19 	bl	8000424 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005f2:	bf00      	nop
 80005f4:	f7ff ff2a 	bl	800044c <LL_FLASH_GetLatency>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1fa      	bne.n	80005f4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80005fe:	2010      	movs	r0, #16
 8000600:	f7ff fe70 	bl	80002e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000604:	f7ff fe4e 	bl	80002a4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000608:	bf00      	nop
 800060a:	f7ff fe59 	bl	80002c0 <LL_RCC_HSI_IsReady>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	d1fa      	bne.n	800060a <SystemClock_Config+0x22>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff fe99 	bl	800034c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff feaa 	bl	8000374 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff febb 	bl	800039c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fe70 	bl	800030c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800062c:	bf00      	nop
 800062e:	f7ff fe81 	bl	8000334 <LL_RCC_GetSysClkSource>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1fa      	bne.n	800062e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <SystemClock_Config+0x60>)
 800063a:	f000 fc4f 	bl	8000edc <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800063e:	4802      	ldr	r0, [pc, #8]	@ (8000648 <SystemClock_Config+0x60>)
 8000640:	f000 fc5a 	bl	8000ef8 <LL_SetSystemCoreClock>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	007a1200 	.word	0x007a1200

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	@ 0x30
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000674:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000678:	f7ff fea4 	bl	80003c4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff feb9 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000682:	f240 4304 	movw	r3, #1028	@ 0x404
 8000686:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000688:	2309      	movs	r3, #9
 800068a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	481d      	ldr	r0, [pc, #116]	@ (8000710 <MX_USART2_UART_Init+0xc4>)
 800069a:	f000 f996 	bl	80009ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800069e:	f640 0308 	movw	r3, #2056	@ 0x808
 80006a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80006a4:	2304      	movs	r3, #4
 80006a6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4818      	ldr	r0, [pc, #96]	@ (8000710 <MX_USART2_UART_Init+0xc4>)
 80006ae:	f000 f98c 	bl	80009ca <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80006b2:	f7ff fd71 	bl	8000198 <__NVIC_GetPriorityGrouping>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fdbf 	bl	8000240 <NVIC_EncodePriority>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4619      	mov	r1, r3
 80006c6:	2026      	movs	r0, #38	@ 0x26
 80006c8:	f7ff fd90 	bl	80001ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80006cc:	2026      	movs	r0, #38	@ 0x26
 80006ce:	f7ff fd71 	bl	80001b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80006d2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80006d6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80006e4:	230c      	movs	r3, #12
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <MX_USART2_UART_Init+0xc8>)
 80006f8:	f000 fb76 	bl	8000de8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80006fc:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0xc8>)
 80006fe:	f7ff fec0 	bl	8000482 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000702:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_USART2_UART_Init+0xc8>)
 8000704:	f7ff feae 	bl	8000464 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3730      	adds	r7, #48	@ 0x30
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40010800 	.word	0x40010800
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800072c:	2010      	movs	r0, #16
 800072e:	f7ff fe61 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000732:	2020      	movs	r0, #32
 8000734:	f7ff fe5e 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff fe5b 	bl	80003f4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_0_GPIO_Port, LED_0_Pin);
 800073e:	490a      	ldr	r1, [pc, #40]	@ (8000768 <MX_GPIO_Init+0x50>)
 8000740:	480a      	ldr	r0, [pc, #40]	@ (800076c <MX_GPIO_Init+0x54>)
 8000742:	f7ff fec9 	bl	80004d8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_0_Pin;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x50>)
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800074a:	2301      	movs	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_GPIO_Init+0x54>)
 800075c:	f000 f935 	bl	80009ca <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	04200020 	.word	0x04200020
 800076c:	40011000 	.word	0x40011000

08000770 <Status_Led_Task>:

/* USER CODE BEGIN 4 */
static void Status_Led_Task( void *pvParameters )
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	while(1)
	{
		LL_GPIO_TogglePin(LED_0_GPIO_Port,LED_0_Pin);
 8000778:	490b      	ldr	r1, [pc, #44]	@ (80007a8 <Status_Led_Task+0x38>)
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <Status_Led_Task+0x3c>)
 800077c:	f7ff febb 	bl	80004f6 <LL_GPIO_TogglePin>
		if (LL_GPIO_IsOutputPinSet(LED_0_GPIO_Port, LED_0_Pin))
 8000780:	4909      	ldr	r1, [pc, #36]	@ (80007a8 <Status_Led_Task+0x38>)
 8000782:	480a      	ldr	r0, [pc, #40]	@ (80007ac <Status_Led_Task+0x3c>)
 8000784:	f7ff fe92 	bl	80004ac <LL_GPIO_IsOutputPinSet>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <Status_Led_Task+0x26>
		{
			UARTprintf("turn off LED\n");
 800078e:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <Status_Led_Task+0x40>)
 8000790:	f001 ff32 	bl	80025f8 <UARTprintf>
 8000794:	e002      	b.n	800079c <Status_Led_Task+0x2c>
		}
		else
			UARTprintf("turn on LED\n");
 8000796:	4807      	ldr	r0, [pc, #28]	@ (80007b4 <Status_Led_Task+0x44>)
 8000798:	f001 ff2e 	bl	80025f8 <UARTprintf>
		vTaskDelay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a0:	f000 fd84 	bl	80012ac <vTaskDelay>
		LL_GPIO_TogglePin(LED_0_GPIO_Port,LED_0_Pin);
 80007a4:	e7e8      	b.n	8000778 <Status_Led_Task+0x8>
 80007a6:	bf00      	nop
 80007a8:	04200020 	.word	0x04200020
 80007ac:	40011000 	.word	0x40011000
 80007b0:	080028cc 	.word	0x080028cc
 80007b4:	080028dc 	.word	0x080028dc

080007b8 <Switch_Task>:
	}
}
static void Switch_Task( void *pvParameters )
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
//	uint32_t	buttons_val;
//	uint32_t	pressed_key;
	while(1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Switch_Task+0x8>

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <NMI_Handler+0x4>

080007cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTStdioIntHandler();
 80007fc:	f001 ff52 	bl	80026a4 <UARTStdioIntHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000810:	f7ff fff8 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480b      	ldr	r0, [pc, #44]	@ (8000844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000816:	490c      	ldr	r1, [pc, #48]	@ (8000848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000818:	4a0c      	ldr	r2, [pc, #48]	@ (800084c <LoopFillZerobss+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a09      	ldr	r2, [pc, #36]	@ (8000850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800082c:	4c09      	ldr	r4, [pc, #36]	@ (8000854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f002 f809 	bl	8002850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083e:	f7ff fe87 	bl	8000550 <main>
  bx lr
 8000842:	4770      	bx	lr
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800084c:	0800293c 	.word	0x0800293c
  ldr r2, =_sbss
 8000850:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000854:	200049e4 	.word	0x200049e4

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>

0800085a <LL_GPIO_SetPinMode>:
{
 800085a:	b490      	push	{r4, r7}
 800085c:	b088      	sub	sp, #32
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	461a      	mov	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	0e1b      	lsrs	r3, r3, #24
 800086e:	4413      	add	r3, r2
 8000870:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000872:	6822      	ldr	r2, [r4, #0]
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa93 f3a3 	rbit	r3, r3
 800087e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	fab3 f383 	clz	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	210f      	movs	r1, #15
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	401a      	ands	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	fa93 f3a3 	rbit	r3, r3
 800089e:	61bb      	str	r3, [r7, #24]
  return result;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	6023      	str	r3, [r4, #0]
}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc90      	pop	{r4, r7}
 80008bc:	4770      	bx	lr

080008be <LL_GPIO_SetPinSpeed>:
{
 80008be:	b490      	push	{r4, r7}
 80008c0:	b088      	sub	sp, #32
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	461a      	mov	r2, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	0e1b      	lsrs	r3, r3, #24
 80008d2:	4413      	add	r3, r2
 80008d4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80008d6:	6822      	ldr	r2, [r4, #0]
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa93 f3a3 	rbit	r3, r3
 80008e2:	613b      	str	r3, [r7, #16]
  return result;
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	2103      	movs	r1, #3
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	fa93 f3a3 	rbit	r3, r3
 8000902:	61bb      	str	r3, [r7, #24]
  return result;
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	4313      	orrs	r3, r2
 8000916:	6023      	str	r3, [r4, #0]
}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bc90      	pop	{r4, r7}
 8000920:	4770      	bx	lr

08000922 <LL_GPIO_SetPinOutputType>:
{
 8000922:	b490      	push	{r4, r7}
 8000924:	b088      	sub	sp, #32
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	461a      	mov	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	0e1b      	lsrs	r3, r3, #24
 8000936:	4413      	add	r3, r2
 8000938:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800093a:	6822      	ldr	r2, [r4, #0]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa93 f3a3 	rbit	r3, r3
 8000946:	613b      	str	r3, [r7, #16]
  return result;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	fab3 f383 	clz	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	2104      	movs	r1, #4
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	401a      	ands	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	fa93 f3a3 	rbit	r3, r3
 8000966:	61bb      	str	r3, [r7, #24]
  return result;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	6023      	str	r3, [r4, #0]
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bc90      	pop	{r4, r7}
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
{
 8000986:	b480      	push	{r7}
 8000988:	b087      	sub	sp, #28
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	43db      	mvns	r3, r3
 800099c:	401a      	ands	r2, r3
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa93 f3a3 	rbit	r3, r3
 80009aa:	613b      	str	r3, [r7, #16]
  return result;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4619      	mov	r1, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	408b      	lsls	r3, r1
 80009ba:	431a      	orrs	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	60da      	str	r2, [r3, #12]
}
 80009c0:	bf00      	nop
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	fa93 f3a3 	rbit	r3, r3
 80009e8:	60fb      	str	r3, [r7, #12]
  return result;
 80009ea:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80009f4:	e044      	b.n	8000a80 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80009f6:	2201      	movs	r2, #1
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	409a      	lsls	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d03a      	beq.n	8000a7a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	2b07      	cmp	r3, #7
 8000a08:	d806      	bhi.n	8000a18 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000a0a:	f240 1201 	movw	r2, #257	@ 0x101
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	e008      	b.n	8000a2a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a28:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	d106      	bne.n	8000a40 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	461a      	mov	r2, r3
 8000a38:	69b9      	ldr	r1, [r7, #24]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffa3 	bl	8000986 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	461a      	mov	r2, r3
 8000a46:	69b9      	ldr	r1, [r7, #24]
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff06 	bl	800085a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d003      	beq.n	8000a5e <LL_GPIO_Init+0x94>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	d10d      	bne.n	8000a7a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	461a      	mov	r2, r3
 8000a64:	69b9      	ldr	r1, [r7, #24]
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff29 	bl	80008be <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	461a      	mov	r2, r3
 8000a72:	69b9      	ldr	r1, [r7, #24]
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff54 	bl	8000922 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	fa22 f303 	lsr.w	r3, r2, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1b4      	bne.n	80009f6 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <LL_RCC_GetSysClkSource>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <LL_RCC_GetSysClkSource+0x14>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 030c 	and.w	r3, r3, #12
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <LL_RCC_GetAHBPrescaler+0x14>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <LL_RCC_GetAPB1Prescaler+0x14>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000

08000ae0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000

08000af8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <LL_RCC_PLL_GetMainSource+0x14>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <LL_RCC_PLL_GetPrediv+0x18>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	0c5b      	lsrs	r3, r3, #17
 8000b32:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b4c:	f000 f820 	bl	8000b90 <RCC_GetSystemClockFreq>
 8000b50:	4602      	mov	r2, r0
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f83e 	bl	8000bdc <RCC_GetHCLKClockFreq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f84c 	bl	8000c08 <RCC_GetPCLK1ClockFreq>
 8000b70:	4602      	mov	r2, r0
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f858 	bl	8000c30 <RCC_GetPCLK2ClockFreq>
 8000b80:	4602      	mov	r2, r0
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000b9a:	f7ff ff7d 	bl	8000a98 <LL_RCC_GetSysClkSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d00c      	beq.n	8000bbe <RCC_GetSystemClockFreq+0x2e>
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d80e      	bhi.n	8000bc6 <RCC_GetSystemClockFreq+0x36>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <RCC_GetSystemClockFreq+0x22>
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d003      	beq.n	8000bb8 <RCC_GetSystemClockFreq+0x28>
 8000bb0:	e009      	b.n	8000bc6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <RCC_GetSystemClockFreq+0x48>)
 8000bb4:	607b      	str	r3, [r7, #4]
      break;
 8000bb6:	e009      	b.n	8000bcc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <RCC_GetSystemClockFreq+0x48>)
 8000bba:	607b      	str	r3, [r7, #4]
      break;
 8000bbc:	e006      	b.n	8000bcc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000bbe:	f000 f84b 	bl	8000c58 <RCC_PLL_GetFreqDomain_SYS>
 8000bc2:	6078      	str	r0, [r7, #4]
      break;
 8000bc4:	e002      	b.n	8000bcc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <RCC_GetSystemClockFreq+0x48>)
 8000bc8:	607b      	str	r3, [r7, #4]
      break;
 8000bca:	bf00      	nop
  }

  return frequency;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	007a1200 	.word	0x007a1200

08000bdc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000be4:	f7ff ff64 	bl	8000ab0 <LL_RCC_GetAHBPrescaler>
 8000be8:	4603      	mov	r3, r0
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <RCC_GetHCLKClockFreq+0x28>)
 8000bf2:	5cd3      	ldrb	r3, [r2, r3]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	40d3      	lsrs	r3, r2
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800291c 	.word	0x0800291c

08000c08 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000c10:	f7ff ff5a 	bl	8000ac8 <LL_RCC_GetAPB1Prescaler>
 8000c14:	4603      	mov	r3, r0
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <RCC_GetPCLK1ClockFreq+0x24>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	40d3      	lsrs	r3, r2
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800292c 	.word	0x0800292c

08000c30 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000c38:	f7ff ff52 	bl	8000ae0 <LL_RCC_GetAPB2Prescaler>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	0adb      	lsrs	r3, r3, #11
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <RCC_GetPCLK2ClockFreq+0x24>)
 8000c42:	5cd3      	ldrb	r3, [r2, r3]
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	40d3      	lsrs	r3, r2
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	0800292c 	.word	0x0800292c

08000c58 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000c66:	f7ff ff47 	bl	8000af8 <LL_RCC_PLL_GetMainSource>
 8000c6a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c78:	d003      	beq.n	8000c82 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000c7a:	e00b      	b.n	8000c94 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000c7e:	607b      	str	r3, [r7, #4]
      break;
 8000c80:	e00b      	b.n	8000c9a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000c82:	f7ff ff51 	bl	8000b28 <LL_RCC_PLL_GetPrediv>
 8000c86:	4603      	mov	r3, r0
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c90:	607b      	str	r3, [r7, #4]
      break;
 8000c92:	e002      	b.n	8000c9a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000c96:	607b      	str	r3, [r7, #4]
      break;
 8000c98:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000c9a:	f7ff ff39 	bl	8000b10 <LL_RCC_PLL_GetMultiplicator>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	0c9b      	lsrs	r3, r3, #18
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	003d0900 	.word	0x003d0900
 8000cb8:	007a1200 	.word	0x007a1200

08000cbc <LL_USART_IsEnabled>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr

08000ce2 <LL_USART_SetStopBitsLength>:
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <LL_USART_SetHWFlowCtrl>:
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	615a      	str	r2, [r3, #20]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
	...

08000d2c <LL_USART_SetBaudRate>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	009a      	lsls	r2, r3, #2
 8000d42:	441a      	add	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <LL_USART_SetBaudRate+0xb8>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	009a      	lsls	r2, r3, #2
 8000d64:	441a      	add	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <LL_USART_SetBaudRate+0xb8>)
 8000d70:	fba3 0302 	umull	r0, r3, r3, r2
 8000d74:	095b      	lsrs	r3, r3, #5
 8000d76:	2064      	movs	r0, #100	@ 0x64
 8000d78:	fb00 f303 	mul.w	r3, r0, r3
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	3332      	adds	r3, #50	@ 0x32
 8000d82:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <LL_USART_SetBaudRate+0xb8>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	095b      	lsrs	r3, r3, #5
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	440b      	add	r3, r1
 8000d94:	b299      	uxth	r1, r3
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009a      	lsls	r2, r3, #2
 8000da0:	441a      	add	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <LL_USART_SetBaudRate+0xb8>)
 8000dac:	fba3 0302 	umull	r0, r3, r3, r2
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	2064      	movs	r0, #100	@ 0x64
 8000db4:	fb00 f303 	mul.w	r3, r0, r3
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	3332      	adds	r3, #50	@ 0x32
 8000dbe:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <LL_USART_SetBaudRate+0xb8>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f003 030f 	and.w	r3, r3, #15
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	440b      	add	r3, r1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	609a      	str	r2, [r3, #8]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	51eb851f 	.word	0x51eb851f

08000de8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff5e 	bl	8000cbc <LL_USART_IsEnabled>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d145      	bne.n	8000e92 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8000e0e:	f023 030c 	bic.w	r3, r3, #12
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6851      	ldr	r1, [r2, #4]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	68d2      	ldr	r2, [r2, #12]
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	6912      	ldr	r2, [r2, #16]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff57 	bl	8000ce2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff63 	bl	8000d06 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe7d 	bl	8000b44 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a13      	ldr	r2, [pc, #76]	@ (8000e9c <LL_USART_Init+0xb4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d102      	bne.n	8000e58 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	e00c      	b.n	8000e72 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <LL_USART_Init+0xb8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d102      	bne.n	8000e66 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	e005      	b.n	8000e72 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <LL_USART_Init+0xbc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d008      	beq.n	8000e92 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8000e80:	2300      	movs	r3, #0
 8000e82:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000e88:	461a      	mov	r2, r3
 8000e8a:	69b9      	ldr	r1, [r7, #24]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff4d 	bl	8000d2c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40004800 	.word	0x40004800

08000ea8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <LL_InitTick+0x30>)
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <LL_InitTick+0x30>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <LL_InitTick+0x30>)
 8000ec8:	2205      	movs	r2, #5
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000ee4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffdd 	bl	8000ea8 <LL_InitTick>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000f00:	4a03      	ldr	r2, [pc, #12]	@ (8000f10 <LL_SetSystemCoreClock+0x18>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000000 	.word	0x20000000

08000f14 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f103 0208 	add.w	r2, r3, #8
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f103 0208 	add.w	r2, r3, #8
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f103 0208 	add.w	r2, r3, #8
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d103      	bne.n	8000f8a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e00c      	b.n	8000fa4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e002      	b.n	8000f98 <vListInsert+0x2e>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d2f6      	bcs.n	8000f92 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6892      	ldr	r2, [r2, #8]
 8000ff0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6852      	ldr	r2, [r2, #4]
 8000ffa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d103      	bne.n	800100e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	@ 0x30
 8001030:	af04      	add	r7, sp, #16
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fe35 	bl	8001cb0 <pvPortMalloc>
 8001046:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d013      	beq.n	8001076 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800104e:	2054      	movs	r0, #84	@ 0x54
 8001050:	f000 fe2e 	bl	8001cb0 <pvPortMalloc>
 8001054:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800105c:	2254      	movs	r2, #84	@ 0x54
 800105e:	2100      	movs	r1, #0
 8001060:	69f8      	ldr	r0, [r7, #28]
 8001062:	f001 fbed 	bl	8002840 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	631a      	str	r2, [r3, #48]	@ 0x30
 800106c:	e005      	b.n	800107a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f000 febc 	bl	8001dec <vPortFree>
 8001074:	e001      	b.n	800107a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	2300      	movs	r3, #0
 8001084:	9303      	str	r3, [sp, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f80e 	bl	80010b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800109c:	69f8      	ldr	r0, [r7, #28]
 800109e:	f000 f873 	bl	8001188 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	e002      	b.n	80010ae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80010ae:	69bb      	ldr	r3, [r7, #24]
    }
 80010b0:	4618      	mov	r0, r3
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010d0:	3b01      	subs	r3, #1
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f023 0307 	bic.w	r3, r3, #7
 80010de:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01e      	beq.n	8001124 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e012      	b.n	8001112 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4413      	add	r3, r2
 80010f2:	7819      	ldrb	r1, [r3, #0]
 80010f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	4413      	add	r3, r2
 80010fa:	3334      	adds	r3, #52	@ 0x34
 80010fc:	460a      	mov	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d9e9      	bls.n	80010ec <prvInitialiseNewTask+0x34>
 8001118:	e000      	b.n	800111c <prvInitialiseNewTask+0x64>
            {
                break;
 800111a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800111c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d901      	bls.n	800112e <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800112a:	2304      	movs	r3, #4
 800112c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800112e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001130:	6a3a      	ldr	r2, [r7, #32]
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001136:	6a3a      	ldr	r2, [r7, #32]
 8001138:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800113a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113c:	3304      	adds	r3, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff07 	bl	8000f52 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001146:	3318      	adds	r3, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff02 	bl	8000f52 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800114e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001152:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	f1c3 0205 	rsb	r2, r3, #5
 800115a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800115e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	6938      	ldr	r0, [r7, #16]
 800116a:	f000 fc75 	bl	8001a58 <pxPortInitialiseStack>
 800116e:	4602      	mov	r2, r0
 8001170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001172:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800117e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001190:	f000 fcf4 	bl	8001b7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <prvAddNewTaskToReadyList+0x108>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a3d      	ldr	r2, [pc, #244]	@ (8001290 <prvAddNewTaskToReadyList+0x108>)
 800119c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800119e:	4b3d      	ldr	r3, [pc, #244]	@ (8001294 <prvAddNewTaskToReadyList+0x10c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80011a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001294 <prvAddNewTaskToReadyList+0x10c>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80011ac:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <prvAddNewTaskToReadyList+0x108>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d110      	bne.n	80011d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80011b4:	f000 fb38 	bl	8001828 <prvInitialiseTaskLists>
 80011b8:	e00d      	b.n	80011d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80011ba:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <prvAddNewTaskToReadyList+0x110>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <prvAddNewTaskToReadyList+0x10c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d802      	bhi.n	80011d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80011d0:	4a30      	ldr	r2, [pc, #192]	@ (8001294 <prvAddNewTaskToReadyList+0x10c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <prvAddNewTaskToReadyList+0x114>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a2f      	ldr	r2, [pc, #188]	@ (800129c <prvAddNewTaskToReadyList+0x114>)
 80011de:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e4:	2201      	movs	r2, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <prvAddNewTaskToReadyList+0x118>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	4a2c      	ldr	r2, [pc, #176]	@ (80012a0 <prvAddNewTaskToReadyList+0x118>)
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f6:	492b      	ldr	r1, [pc, #172]	@ (80012a4 <prvAddNewTaskToReadyList+0x11c>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	3204      	adds	r2, #4
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1d1a      	adds	r2, r3, #4
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <prvAddNewTaskToReadyList+0x11c>)
 8001236:	441a      	add	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001240:	4918      	ldr	r1, [pc, #96]	@ (80012a4 <prvAddNewTaskToReadyList+0x11c>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	4814      	ldr	r0, [pc, #80]	@ (80012a4 <prvAddNewTaskToReadyList+0x11c>)
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4403      	add	r3, r0
 800125c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800125e:	f000 fca7 	bl	8001bb0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <prvAddNewTaskToReadyList+0x110>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00e      	beq.n	8001288 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <prvAddNewTaskToReadyList+0x10c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <prvAddNewTaskToReadyList+0x120>)
 800127a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	f3bf 8f4f 	dsb	sy
 8001284:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000108 	.word	0x20000108
 8001294:	20000030 	.word	0x20000030
 8001298:	20000114 	.word	0x20000114
 800129c:	20000124 	.word	0x20000124
 80012a0:	20000110 	.word	0x20000110
 80012a4:	20000034 	.word	0x20000034
 80012a8:	e000ed04 	.word	0xe000ed04

080012ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d008      	beq.n	80012d0 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80012be:	f000 f855 	bl	800136c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fb47 	bl	8001958 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80012ca:	f000 f85d 	bl	8001388 <xTaskResumeAll>
 80012ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <vTaskDelay+0x44>)
 80012d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000ed04 	.word	0xe000ed04

080012f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <vTaskStartScheduler+0x5c>)
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2300      	movs	r3, #0
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	4913      	ldr	r1, [pc, #76]	@ (8001354 <vTaskStartScheduler+0x60>)
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <vTaskStartScheduler+0x64>)
 800130a:	f7ff fe8f 	bl	800102c <xTaskCreate>
 800130e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d115      	bne.n	8001342 <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001316:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 800131a:	f383 8811 	msr	BASEPRI, r3
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	f3bf 8f4f 	dsb	sy
 8001326:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001328:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <vTaskStartScheduler+0x68>)
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <vTaskStartScheduler+0x6c>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <vTaskStartScheduler+0x70>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800133e:	f000 fbfd 	bl	8001b3c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <vTaskStartScheduler+0x74>)
 8001344:	681b      	ldr	r3, [r3, #0]
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000012c 	.word	0x2000012c
 8001354:	080028ec 	.word	0x080028ec
 8001358:	080017f9 	.word	0x080017f9
 800135c:	20000128 	.word	0x20000128
 8001360:	20000114 	.word	0x20000114
 8001364:	2000010c 	.word	0x2000010c
 8001368:	20000004 	.word	0x20000004

0800136c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <vTaskSuspendAll+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <vTaskSuspendAll+0x18>)
 8001378:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000130 	.word	0x20000130

08001388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001396:	f000 fbf1 	bl	8001b7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800139a:	4b68      	ldr	r3, [pc, #416]	@ (800153c <xTaskResumeAll+0x1b4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a66      	ldr	r2, [pc, #408]	@ (800153c <xTaskResumeAll+0x1b4>)
 80013a2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013a4:	4b65      	ldr	r3, [pc, #404]	@ (800153c <xTaskResumeAll+0x1b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f040 80c0 	bne.w	800152e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80013ae:	4b64      	ldr	r3, [pc, #400]	@ (8001540 <xTaskResumeAll+0x1b8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80bb 	beq.w	800152e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013b8:	e08a      	b.n	80014d0 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013ba:	4b62      	ldr	r3, [pc, #392]	@ (8001544 <xTaskResumeAll+0x1bc>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	6a12      	ldr	r2, [r2, #32]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	69d2      	ldr	r2, [r2, #28]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3318      	adds	r3, #24
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d103      	bne.n	80013f0 <xTaskResumeAll+0x68>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	6a1a      	ldr	r2, [r3, #32]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	68d2      	ldr	r2, [r2, #12]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	6892      	ldr	r2, [r2, #8]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3304      	adds	r3, #4
 8001422:	429a      	cmp	r2, r3
 8001424:	d103      	bne.n	800142e <xTaskResumeAll+0xa6>
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001442:	2201      	movs	r2, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <xTaskResumeAll+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	4a3e      	ldr	r2, [pc, #248]	@ (8001548 <xTaskResumeAll+0x1c0>)
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001454:	493d      	ldr	r1, [pc, #244]	@ (800154c <xTaskResumeAll+0x1c4>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3304      	adds	r3, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	3204      	adds	r2, #4
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	1d1a      	adds	r2, r3, #4
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a2e      	ldr	r2, [pc, #184]	@ (800154c <xTaskResumeAll+0x1c4>)
 8001494:	441a      	add	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800149e:	492b      	ldr	r1, [pc, #172]	@ (800154c <xTaskResumeAll+0x1c4>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	4827      	ldr	r0, [pc, #156]	@ (800154c <xTaskResumeAll+0x1c4>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4403      	add	r3, r0
 80014ba:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c0:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <xTaskResumeAll+0x1c8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d302      	bcc.n	80014d0 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <xTaskResumeAll+0x1cc>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <xTaskResumeAll+0x1bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f af70 	bne.w	80013ba <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80014e0:	f000 fa20 	bl	8001924 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <xTaskResumeAll+0x1d0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d010      	beq.n	8001512 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80014f0:	f000 f836 	bl	8001560 <xTaskIncrementTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <xTaskResumeAll+0x1cc>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b01      	subs	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f1      	bne.n	80014f0 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <xTaskResumeAll+0x1d0>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <xTaskResumeAll+0x1cc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <xTaskResumeAll+0x1d4>)
 8001520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800152e:	f000 fb3f 	bl	8001bb0 <vPortExitCritical>

    return xAlreadyYielded;
 8001532:	693b      	ldr	r3, [r7, #16]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000130 	.word	0x20000130
 8001540:	20000108 	.word	0x20000108
 8001544:	200000c8 	.word	0x200000c8
 8001548:	20000110 	.word	0x20000110
 800154c:	20000034 	.word	0x20000034
 8001550:	20000030 	.word	0x20000030
 8001554:	2000011c 	.word	0x2000011c
 8001558:	20000118 	.word	0x20000118
 800155c:	e000ed04 	.word	0xe000ed04

08001560 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800156a:	4b75      	ldr	r3, [pc, #468]	@ (8001740 <xTaskIncrementTick+0x1e0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 80dc 	bne.w	800172c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001574:	4b73      	ldr	r3, [pc, #460]	@ (8001744 <xTaskIncrementTick+0x1e4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800157c:	4a71      	ldr	r2, [pc, #452]	@ (8001744 <xTaskIncrementTick+0x1e4>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d110      	bne.n	80015aa <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001588:	4b6f      	ldr	r3, [pc, #444]	@ (8001748 <xTaskIncrementTick+0x1e8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <xTaskIncrementTick+0x1ec>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6d      	ldr	r2, [pc, #436]	@ (8001748 <xTaskIncrementTick+0x1e8>)
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4a6d      	ldr	r2, [pc, #436]	@ (800174c <xTaskIncrementTick+0x1ec>)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b6c      	ldr	r3, [pc, #432]	@ (8001750 <xTaskIncrementTick+0x1f0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a6b      	ldr	r2, [pc, #428]	@ (8001750 <xTaskIncrementTick+0x1f0>)
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	f000 f9bd 	bl	8001924 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80015aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001754 <xTaskIncrementTick+0x1f4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f0c0 80a6 	bcc.w	8001702 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015b6:	4b64      	ldr	r3, [pc, #400]	@ (8001748 <xTaskIncrementTick+0x1e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d104      	bne.n	80015ca <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015c0:	4b64      	ldr	r3, [pc, #400]	@ (8001754 <xTaskIncrementTick+0x1f4>)
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295
 80015c6:	601a      	str	r2, [r3, #0]
                    break;
 80015c8:	e09b      	b.n	8001702 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <xTaskIncrementTick+0x1e8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d203      	bcs.n	80015ea <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80015e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001754 <xTaskIncrementTick+0x1f4>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80015e8:	e08b      	b.n	8001702 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68d2      	ldr	r2, [r2, #12]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	6892      	ldr	r2, [r2, #8]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	3304      	adds	r3, #4
 800160c:	429a      	cmp	r2, r3
 800160e:	d103      	bne.n	8001618 <xTaskIncrementTick+0xb8>
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01e      	beq.n	800166e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	6a12      	ldr	r2, [r2, #32]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	69d2      	ldr	r2, [r2, #28]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	3318      	adds	r3, #24
 8001652:	429a      	cmp	r2, r3
 8001654:	d103      	bne.n	800165e <xTaskIncrementTick+0xfe>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	2201      	movs	r2, #1
 8001674:	409a      	lsls	r2, r3
 8001676:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <xTaskIncrementTick+0x1f8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	4a36      	ldr	r2, [pc, #216]	@ (8001758 <xTaskIncrementTick+0x1f8>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001684:	4935      	ldr	r1, [pc, #212]	@ (800175c <xTaskIncrementTick+0x1fc>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	3204      	adds	r2, #4
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1d1a      	adds	r2, r3, #4
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4a26      	ldr	r2, [pc, #152]	@ (800175c <xTaskIncrementTick+0x1fc>)
 80016c4:	441a      	add	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ce:	4923      	ldr	r1, [pc, #140]	@ (800175c <xTaskIncrementTick+0x1fc>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1c59      	adds	r1, r3, #1
 80016de:	481f      	ldr	r0, [pc, #124]	@ (800175c <xTaskIncrementTick+0x1fc>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4403      	add	r3, r0
 80016ea:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <xTaskIncrementTick+0x200>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f6:	429a      	cmp	r2, r3
 80016f8:	f67f af5d 	bls.w	80015b6 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001700:	e759      	b.n	80015b6 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <xTaskIncrementTick+0x200>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001708:	4914      	ldr	r1, [pc, #80]	@ (800175c <xTaskIncrementTick+0x1fc>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d901      	bls.n	800171e <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <xTaskIncrementTick+0x204>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8001726:	2301      	movs	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e004      	b.n	8001736 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <xTaskIncrementTick+0x208>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <xTaskIncrementTick+0x208>)
 8001734:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001736:	69fb      	ldr	r3, [r7, #28]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000130 	.word	0x20000130
 8001744:	2000010c 	.word	0x2000010c
 8001748:	200000c0 	.word	0x200000c0
 800174c:	200000c4 	.word	0x200000c4
 8001750:	20000120 	.word	0x20000120
 8001754:	20000128 	.word	0x20000128
 8001758:	20000110 	.word	0x20000110
 800175c:	20000034 	.word	0x20000034
 8001760:	20000030 	.word	0x20000030
 8001764:	2000011c 	.word	0x2000011c
 8001768:	20000118 	.word	0x20000118

0800176c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <vTaskSwitchContext+0x78>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <vTaskSwitchContext+0x7c>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001780:	e02a      	b.n	80017d8 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <vTaskSwitchContext+0x7c>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <vTaskSwitchContext+0x80>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f1c3 031f 	rsb	r3, r3, #31
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <vTaskSwitchContext+0x84>)
 80017aa:	4413      	add	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3308      	adds	r3, #8
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d104      	bne.n	80017ce <vTaskSwitchContext+0x62>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <vTaskSwitchContext+0x88>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000130 	.word	0x20000130
 80017e8:	2000011c 	.word	0x2000011c
 80017ec:	20000110 	.word	0x20000110
 80017f0:	20000034 	.word	0x20000034
 80017f4:	20000030 	.word	0x20000030

080017f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001800:	f000 f852 	bl	80018a8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <prvIdleTask+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d9f9      	bls.n	8001800 <prvIdleTask+0x8>
            {
                taskYIELD();
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <prvIdleTask+0x2c>)
 800180e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800181c:	e7f0      	b.n	8001800 <prvIdleTask+0x8>
 800181e:	bf00      	nop
 8001820:	20000034 	.word	0x20000034
 8001824:	e000ed04 	.word	0xe000ed04

08001828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	e00c      	b.n	800184e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <prvInitialiseTaskLists+0x60>)
 8001840:	4413      	add	r3, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb66 	bl	8000f14 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d9ef      	bls.n	8001834 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <prvInitialiseTaskLists+0x64>)
 8001856:	f7ff fb5d 	bl	8000f14 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800185a:	480d      	ldr	r0, [pc, #52]	@ (8001890 <prvInitialiseTaskLists+0x68>)
 800185c:	f7ff fb5a 	bl	8000f14 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <prvInitialiseTaskLists+0x6c>)
 8001862:	f7ff fb57 	bl	8000f14 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001866:	480c      	ldr	r0, [pc, #48]	@ (8001898 <prvInitialiseTaskLists+0x70>)
 8001868:	f7ff fb54 	bl	8000f14 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800186c:	480b      	ldr	r0, [pc, #44]	@ (800189c <prvInitialiseTaskLists+0x74>)
 800186e:	f7ff fb51 	bl	8000f14 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <prvInitialiseTaskLists+0x78>)
 8001874:	4a05      	ldr	r2, [pc, #20]	@ (800188c <prvInitialiseTaskLists+0x64>)
 8001876:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <prvInitialiseTaskLists+0x7c>)
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <prvInitialiseTaskLists+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000034 	.word	0x20000034
 800188c:	20000098 	.word	0x20000098
 8001890:	200000ac 	.word	0x200000ac
 8001894:	200000c8 	.word	0x200000c8
 8001898:	200000dc 	.word	0x200000dc
 800189c:	200000f4 	.word	0x200000f4
 80018a0:	200000c0 	.word	0x200000c0
 80018a4:	200000c4 	.word	0x200000c4

080018a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018ae:	e019      	b.n	80018e4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80018b0:	f000 f964 	bl	8001b7c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <prvCheckTasksWaitingTermination+0x50>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3304      	adds	r3, #4
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb8a 	bl	8000fda <uxListRemove>
                --uxCurrentNumberOfTasks;
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <prvCheckTasksWaitingTermination+0x54>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <prvCheckTasksWaitingTermination+0x54>)
 80018ce:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <prvCheckTasksWaitingTermination+0x58>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <prvCheckTasksWaitingTermination+0x58>)
 80018d8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80018da:	f000 f969 	bl	8001bb0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f810 	bl	8001904 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <prvCheckTasksWaitingTermination+0x58>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e1      	bne.n	80018b0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200000dc 	.word	0x200000dc
 80018fc:	20000108 	.word	0x20000108
 8001900:	200000f0 	.word	0x200000f0

08001904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fa6b 	bl	8001dec <vPortFree>
            vPortFree( pxTCB );
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fa68 	bl	8001dec <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <prvResetNextTaskUnblockTime+0x2c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d104      	bne.n	800193c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <prvResetNextTaskUnblockTime+0x30>)
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800193a:	e005      	b.n	8001948 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <prvResetNextTaskUnblockTime+0x2c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <prvResetNextTaskUnblockTime+0x30>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200000c0 	.word	0x200000c0
 8001954:	20000128 	.word	0x20000128

08001958 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001962:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001968:	4b35      	ldr	r3, [pc, #212]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb33 	bl	8000fda <uxListRemove>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10b      	bne.n	8001992 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800197a:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	2201      	movs	r2, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <prvAddCurrentTaskToDelayedList+0xec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4013      	ands	r3, r2
 800198e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a44 <prvAddCurrentTaskToDelayedList+0xec>)
 8001990:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d124      	bne.n	80019e4 <prvAddCurrentTaskToDelayedList+0x8c>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d021      	beq.n	80019e4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	6892      	ldr	r2, [r2, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	3204      	adds	r2, #4
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	1d1a      	adds	r2, r3, #4
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a48 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80019e2:	e026      	b.n	8001a32 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d209      	bcs.n	8001a10 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <prvAddCurrentTaskToDelayedList+0xf4>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3304      	adds	r3, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f7ff faae 	bl	8000f6a <vListInsert>
}
 8001a0e:	e010      	b.n	8001a32 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f7ff faa4 	bl	8000f6a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d202      	bcs.n	8001a32 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001a2c:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6013      	str	r3, [r2, #0]
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000010c 	.word	0x2000010c
 8001a40:	20000030 	.word	0x20000030
 8001a44:	20000110 	.word	0x20000110
 8001a48:	200000f4 	.word	0x200000f4
 8001a4c:	200000c4 	.word	0x200000c4
 8001a50:	200000c0 	.word	0x200000c0
 8001a54:	20000128 	.word	0x20000128

08001a58 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b04      	subs	r3, #4
 8001a68:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3b04      	subs	r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f023 0201 	bic.w	r2, r3, #1
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3b04      	subs	r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001a88:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <pxPortInitialiseStack+0x54>)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3b14      	subs	r3, #20
 8001a92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b20      	subs	r3, #32
 8001a9e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	08001ab1 	.word	0x08001ab1

08001ab0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001aba:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	607b      	str	r3, [r7, #4]
    }
 8001acc:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001ace:	bf00      	nop
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0fc      	beq.n	8001ad0 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
	...

08001af0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001af0:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <pxCurrentTCBConst2>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	6808      	ldr	r0, [r1, #0]
 8001af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001afa:	f380 8809 	msr	PSP, r0
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f380 8811 	msr	BASEPRI, r0
 8001b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001b0e:	4770      	bx	lr

08001b10 <pxCurrentTCBConst2>:
 8001b10:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop

08001b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001b18:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <prvPortStartFirstTask+0x1c>)
 8001b1a:	6800      	ldr	r0, [r0, #0]
 8001b1c:	6800      	ldr	r0, [r0, #0]
 8001b1e:	f380 8808 	msr	MSP, r0
 8001b22:	b662      	cpsie	i
 8001b24:	b661      	cpsie	f
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	df00      	svc	0
 8001b30:	bf00      	nop
 8001b32:	0000      	.short	0x0000
 8001b34:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop

08001b3c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <xPortStartScheduler+0x38>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <xPortStartScheduler+0x38>)
 8001b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b4a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <xPortStartScheduler+0x38>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <xPortStartScheduler+0x38>)
 8001b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b56:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001b58:	f000 f890 	bl	8001c7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <xPortStartScheduler+0x3c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001b62:	f7ff ffd9 	bl	8001b18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001b66:	f7ff fe01 	bl	800176c <vTaskSwitchContext>
    prvTaskExitError();
 8001b6a:	f7ff ffa1 	bl	8001ab0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	e000ed20 	.word	0xe000ed20
 8001b78:	20000008 	.word	0x20000008

08001b7c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
        __asm volatile
 8001b82:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001b86:	f383 8811 	msr	BASEPRI, r3
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	f3bf 8f4f 	dsb	sy
 8001b92:	607b      	str	r3, [r7, #4]
    }
 8001b94:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <vPortEnterCritical+0x30>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a03      	ldr	r2, [pc, #12]	@ (8001bac <vPortEnterCritical+0x30>)
 8001b9e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <vPortExitCritical+0x30>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <vPortExitCritical+0x30>)
 8001bbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <vPortExitCritical+0x30>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <vPortExitCritical+0x24>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001bd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
	...

08001bf0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001bf0:	f3ef 8009 	mrs	r0, PSP
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <pxCurrentTCBConst>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c00:	6010      	str	r0, [r2, #0]
 8001c02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001c06:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8001c0a:	f380 8811 	msr	BASEPRI, r0
 8001c0e:	f7ff fdad 	bl	800176c <vTaskSwitchContext>
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f380 8811 	msr	BASEPRI, r0
 8001c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	6808      	ldr	r0, [r1, #0]
 8001c22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c26:	f380 8809 	msr	PSP, r0
 8001c2a:	f3bf 8f6f 	isb	sy
 8001c2e:	4770      	bx	lr

08001c30 <pxCurrentTCBConst>:
 8001c30:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop

08001c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
        __asm volatile
 8001c3e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001c42:	f383 8811 	msr	BASEPRI, r3
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	f3bf 8f4f 	dsb	sy
 8001c4e:	607b      	str	r3, [r7, #4]
    }
 8001c50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c52:	f7ff fc85 	bl	8001560 <xTaskIncrementTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <xPortSysTickHandler+0x40>)
 8001c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f383 8811 	msr	BASEPRI, r3
    }
 8001c6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	e000ed04 	.word	0xe000ed04

08001c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <vPortSetupTimerInterrupt+0x28>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <vPortSetupTimerInterrupt+0x2c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <vPortSetupTimerInterrupt+0x30>)
 8001c8e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c92:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <vPortSetupTimerInterrupt+0x28>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	601a      	str	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010
 8001ca8:	e000e018 	.word	0xe000e018
 8001cac:	e000e014 	.word	0xe000e014

08001cb0 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001cbc:	f7ff fb56 	bl	800136c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8001cc0:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <pvPortMalloc+0x12c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d104      	bne.n	8001cd2 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8001cc8:	f000 f8dc 	bl	8001e84 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8001ccc:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <pvPortMalloc+0x12c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001cd8:	2308      	movs	r3, #8
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d804      	bhi.n	8001cfc <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	e001      	b.n	8001d00 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db63      	blt.n	8001dce <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d060      	beq.n	8001dce <pvPortMalloc+0x11e>
 8001d0c:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <pvPortMalloc+0x130>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d85b      	bhi.n	8001dce <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001d16:	4b33      	ldr	r3, [pc, #204]	@ (8001de4 <pvPortMalloc+0x134>)
 8001d18:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001d1a:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <pvPortMalloc+0x134>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d20:	e004      	b.n	8001d2c <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d903      	bls.n	8001d3e <pvPortMalloc+0x8e>
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f1      	bne.n	8001d22 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	4a29      	ldr	r2, [pc, #164]	@ (8001de8 <pvPortMalloc+0x138>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d043      	beq.n	8001dce <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4413      	add	r3, r2
 8001d4e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2208      	movs	r2, #8
 8001d62:	0052      	lsls	r2, r2, #1
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d922      	bls.n	8001dae <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <pvPortMalloc+0x134>)
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e002      	b.n	8001d94 <pvPortMalloc+0xe4>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f6      	bhi.n	8001d8e <pvPortMalloc+0xde>
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <pvPortMalloc+0x130>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a09      	ldr	r2, [pc, #36]	@ (8001de0 <pvPortMalloc+0x130>)
 8001dba:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001dce:	f7ff fadb 	bl	8001388 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3728      	adds	r7, #40	@ 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20004544 	.word	0x20004544
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	20004534 	.word	0x20004534
 8001de8:	2000453c 	.word	0x2000453c

08001dec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d039      	beq.n	8001e72 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	425b      	negs	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	0fdb      	lsrs	r3, r3, #31
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02a      	beq.n	8001e72 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d126      	bne.n	8001e72 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 8001e30:	f7ff fa9c 	bl	800136c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <vPortFree+0x90>)
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e002      	b.n	8001e46 <vPortFree+0x5a>
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d8f6      	bhi.n	8001e40 <vPortFree+0x54>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <vPortFree+0x94>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <vPortFree+0x94>)
 8001e6c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 8001e6e:	f7ff fa8b 	bl	8001388 <xTaskResumeAll>
            }
        }
    }
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20004534 	.word	0x20004534
 8001e80:	2000000c 	.word	0x2000000c

08001e84 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <prvHeapInit+0x44>)
 8001e8c:	f023 0307 	bic.w	r3, r3, #7
 8001e90:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e92:	4a0e      	ldr	r2, [pc, #56]	@ (8001ecc <prvHeapInit+0x48>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <prvHeapInit+0x48>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <prvHeapInit+0x4c>)
 8001ea0:	f244 32f8 	movw	r2, #17400	@ 0x43f8
 8001ea4:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <prvHeapInit+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f244 32f8 	movw	r2, #17400	@ 0x43f8
 8001eb6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <prvHeapInit+0x4c>)
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	2000013b 	.word	0x2000013b
 8001ecc:	20004534 	.word	0x20004534
 8001ed0:	2000453c 	.word	0x2000453c

08001ed4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee4:	2b80      	cmp	r3, #128	@ 0x80
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	330c      	adds	r3, #12
 8001f04:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	e853 3f00 	ldrex	r3, [r3]
 8001f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	61ba      	str	r2, [r7, #24]
 8001f1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f20:	6979      	ldr	r1, [r7, #20]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	e841 2300 	strex	r3, r2, [r1]
 8001f28:	613b      	str	r3, [r7, #16]
   return(result);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e7      	bne.n	8001f00 <LL_USART_EnableIT_RXNE+0x8>
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3724      	adds	r7, #36	@ 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	330c      	adds	r3, #12
 8001f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	e853 3f00 	ldrex	r3, [r3]
 8001f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	61ba      	str	r2, [r7, #24]
 8001f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	e841 2300 	strex	r3, r2, [r1]
 8001f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e7      	bne.n	8001f44 <LL_USART_EnableIT_TXE+0x8>
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	330c      	adds	r3, #12
 8001f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	e853 3f00 	ldrex	r3, [r3]
 8001f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f023 0320 	bic.w	r3, r3, #32
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	61ba      	str	r2, [r7, #24]
 8001fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	e841 2300 	strex	r3, r2, [r1]
 8001fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e7      	bne.n	8001f88 <LL_USART_DisableIT_RXNE+0x8>
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3724      	adds	r7, #36	@ 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	61ba      	str	r2, [r7, #24]
 8001fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	e841 2300 	strex	r3, r2, [r1]
 8001ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e7      	bne.n	8001fcc <LL_USART_DisableIT_TXE+0x8>
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	605a      	str	r2, [r3, #4]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <IsBufferFull>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferFull(volatile uint32_t *pui32Read,
             volatile uint32_t *pui32Write, uint32_t ui32Size)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	617b      	str	r3, [r7, #20]
    ui32Read = *pui32Read;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	613b      	str	r3, [r7, #16]

    return((((ui32Write + 1) % ui32Size) == ui32Read) ? true : false);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	fbb3 f2f2 	udiv	r2, r3, r2
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	fb01 f202 	mul.w	r2, r1, r2
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
}
 800205a:	4618      	mov	r0, r3
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <IsBufferEmpty>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferEmpty(volatile uint32_t *pui32Read,
              volatile uint32_t *pui32Write)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]
    ui32Read = *pui32Read;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60bb      	str	r3, [r7, #8]

    return((ui32Write == ui32Read) ? true : false);
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	bf0c      	ite	eq
 8002082:	2301      	moveq	r3, #1
 8002084:	2300      	movne	r3, #0
 8002086:	b2db      	uxtb	r3, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
	...

08002094 <UARTPrimeTransmit>:
//
//*****************************************************************************
#ifdef UART_BUFFERED
static void
UARTPrimeTransmit(USART_TypeDef *stdUsart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
 800209c:	4914      	ldr	r1, [pc, #80]	@ (80020f0 <UARTPrimeTransmit+0x5c>)
 800209e:	4815      	ldr	r0, [pc, #84]	@ (80020f4 <UARTPrimeTransmit+0x60>)
 80020a0:	f7ff ffe0 	bl	8002064 <IsBufferEmpty>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01a      	beq.n	80020e6 <UARTPrimeTransmit+0x52>
    {
        //
        // Disable the UART interrupt.  If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
    	LL_USART_DisableIT_TXE(stdUsart);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff87 	bl	8001fc4 <LL_USART_DisableIT_TXE>

        //
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //
    	if (LL_USART_IsActiveFlag_TXE(stdUsart))
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff0c 	bl	8001ed4 <LL_USART_IsActiveFlag_TXE>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00e      	beq.n	80020e0 <UARTPrimeTransmit+0x4c>
    	{
        	LL_USART_TransmitData8(stdUsart,
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <UARTPrimeTransmit+0x60>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <UARTPrimeTransmit+0x64>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	4619      	mov	r1, r3
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff9b 	bl	8002008 <LL_USART_TransmitData8>
                                      g_pcUARTTxBuffer[g_ui32UARTTxReadIndex]);
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <UARTPrimeTransmit+0x60>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020dc:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <UARTPrimeTransmit+0x60>)
 80020de:	6013      	str	r3, [r2, #0]
    	}
        //
        // Reenable the UART interrupt.
        //
        LL_USART_EnableIT_TXE(stdUsart);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff2b 	bl	8001f3c <LL_USART_EnableIT_TXE>
    }
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000494c 	.word	0x2000494c
 80020f4:	20004950 	.word	0x20004950
 80020f8:	2000454c 	.word	0x2000454c

080020fc <UARTStdioConfig>:
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(USART_TypeDef *Usart, bool bDisableEcho)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]

    stdUsart = Usart;
 8002108:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <UARTStdioConfig+0x34>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
    g_bDisableEcho = bDisableEcho;
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <UARTStdioConfig+0x38>)
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	7013      	strb	r3, [r2, #0]


    //
    // Flush both the buffers.
    //
    UARTFlushRx();
 8002114:	f000 fa82 	bl	800261c <UARTFlushRx>
    UARTFlushTx(true);
 8002118:	2001      	movs	r0, #1
 800211a:	f000 fa99 	bl	8002650 <UARTFlushTx>
    // We are configured for buffered output so enable the master interrupt
    // for this UART and the receive interrupts.  We don't actually enable the
    // transmit interrupt in the UART itself until some data has been placed
    // in the transmit buffer.
    //
    LL_USART_EnableIT_RXNE(stdUsart);
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <UARTStdioConfig+0x34>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fee8 	bl	8001ef8 <LL_USART_EnableIT_RXNE>

#endif

}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200049dc 	.word	0x200049dc
 8002134:	20004548 	.word	0x20004548

08002138 <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, uint32_t ui32Len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
    //
    // Check for valid arguments.
    //
    assert_param(pcBuf != 0);

    LL_USART_DisableIT_TXE(stdUsart);
 8002142:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <UARTwrite+0xc8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff3c 	bl	8001fc4 <LL_USART_DisableIT_TXE>
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e042      	b.n	80021d8 <UARTwrite+0xa0>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d118      	bne.n	8002190 <UARTwrite+0x58>
        {
            if(!TX_BUFFER_FULL)
 800215e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002162:	4928      	ldr	r1, [pc, #160]	@ (8002204 <UARTwrite+0xcc>)
 8002164:	4828      	ldr	r0, [pc, #160]	@ (8002208 <UARTwrite+0xd0>)
 8002166:	f7ff ff5d 	bl	8002024 <IsBufferFull>
 800216a:	4603      	mov	r3, r0
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d035      	beq.n	80021e2 <UARTwrite+0xaa>
            {
                g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = '\r';
 8002176:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <UARTwrite+0xcc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a24      	ldr	r2, [pc, #144]	@ (800220c <UARTwrite+0xd4>)
 800217c:	210d      	movs	r1, #13
 800217e:	54d1      	strb	r1, [r2, r3]
                ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <UARTwrite+0xcc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218a:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <UARTwrite+0xcc>)
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e005      	b.n	800219c <UARTwrite+0x64>
                // Buffer is full - discard remaining characters and return.
                //
                break;
            }
        }
        else if(pcBuf[uIdx] == 0)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d024      	beq.n	80021e6 <UARTwrite+0xae>
		}

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
 800219c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a0:	4918      	ldr	r1, [pc, #96]	@ (8002204 <UARTwrite+0xcc>)
 80021a2:	4819      	ldr	r0, [pc, #100]	@ (8002208 <UARTwrite+0xd0>)
 80021a4:	f7ff ff3e 	bl	8002024 <IsBufferFull>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01a      	beq.n	80021ea <UARTwrite+0xb2>
        {
            g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = pcBuf[uIdx];
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	441a      	add	r2, r3
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <UARTwrite+0xcc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	7811      	ldrb	r1, [r2, #0]
 80021c0:	4a12      	ldr	r2, [pc, #72]	@ (800220c <UARTwrite+0xd4>)
 80021c2:	54d1      	strb	r1, [r2, r3]
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <UARTwrite+0xcc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <UARTwrite+0xcc>)
 80021d0:	6013      	str	r3, [r2, #0]
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3b8      	bcc.n	8002152 <UARTwrite+0x1a>
 80021e0:	e004      	b.n	80021ec <UARTwrite+0xb4>
                break;
 80021e2:	bf00      	nop
 80021e4:	e002      	b.n	80021ec <UARTwrite+0xb4>
        	break;
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <UARTwrite+0xb4>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
 80021ea:	bf00      	nop
    //
    // If we have anything in the buffer, make sure that the UART is set
    // up to transmit it.
    //

        UARTPrimeTransmit(stdUsart);
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <UARTwrite+0xc8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff4f 	bl	8002094 <UARTPrimeTransmit>

    //
    // Return the number of characters written.
    //
    return(uIdx);
 80021f6:	68fb      	ldr	r3, [r7, #12]
    //
    // Return the number of characters written.
    //
    return(uIdx);
#endif
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200049dc 	.word	0x200049dc
 8002204:	2000494c 	.word	0x2000494c
 8002208:	20004950 	.word	0x20004950
 800220c:	2000454c 	.word	0x2000454c

08002210 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	@ 0x38
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    assert_param(pcString != 0);

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 800221a:	e1dd      	b.n	80025d8 <UARTvprintf+0x3c8>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002220:	e002      	b.n	8002228 <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 8002222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002224:	3301      	adds	r3, #1
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b25      	cmp	r3, #37	@ 0x25
 8002232:	d005      	beq.n	8002240 <UARTvprintf+0x30>
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        UARTwrite(pcString, ui32Idx);
 8002240:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff78 	bl	8002138 <UARTwrite>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224c:	4413      	add	r3, r2
 800224e:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b25      	cmp	r3, #37	@ 0x25
 8002256:	f040 81bf 	bne.w	80025d8 <UARTvprintf+0x3c8>
        {
            //
            // Skip the %.
            //
            pcString++;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3301      	adds	r3, #1
 800225e:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
            cFill = ' ';
 8002264:	2320      	movs	r3, #32
 8002266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	3b25      	subs	r3, #37	@ 0x25
 8002274:	2b53      	cmp	r3, #83	@ 0x53
 8002276:	f200 81a9 	bhi.w	80025cc <UARTvprintf+0x3bc>
 800227a:	a201      	add	r2, pc, #4	@ (adr r2, 8002280 <UARTvprintf+0x70>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	080025bf 	.word	0x080025bf
 8002284:	080025cd 	.word	0x080025cd
 8002288:	080025cd 	.word	0x080025cd
 800228c:	080025cd 	.word	0x080025cd
 8002290:	080025cd 	.word	0x080025cd
 8002294:	080025cd 	.word	0x080025cd
 8002298:	080025cd 	.word	0x080025cd
 800229c:	080025cd 	.word	0x080025cd
 80022a0:	080025cd 	.word	0x080025cd
 80022a4:	080025cd 	.word	0x080025cd
 80022a8:	080025cd 	.word	0x080025cd
 80022ac:	080023d1 	.word	0x080023d1
 80022b0:	080023d1 	.word	0x080023d1
 80022b4:	080023d1 	.word	0x080023d1
 80022b8:	080023d1 	.word	0x080023d1
 80022bc:	080023d1 	.word	0x080023d1
 80022c0:	080023d1 	.word	0x080023d1
 80022c4:	080023d1 	.word	0x080023d1
 80022c8:	080023d1 	.word	0x080023d1
 80022cc:	080023d1 	.word	0x080023d1
 80022d0:	080023d1 	.word	0x080023d1
 80022d4:	080025cd 	.word	0x080025cd
 80022d8:	080025cd 	.word	0x080025cd
 80022dc:	080025cd 	.word	0x080025cd
 80022e0:	080025cd 	.word	0x080025cd
 80022e4:	080025cd 	.word	0x080025cd
 80022e8:	080025cd 	.word	0x080025cd
 80022ec:	080025cd 	.word	0x080025cd
 80022f0:	080025cd 	.word	0x080025cd
 80022f4:	080025cd 	.word	0x080025cd
 80022f8:	080025cd 	.word	0x080025cd
 80022fc:	080025cd 	.word	0x080025cd
 8002300:	080025cd 	.word	0x080025cd
 8002304:	080025cd 	.word	0x080025cd
 8002308:	080025cd 	.word	0x080025cd
 800230c:	080025cd 	.word	0x080025cd
 8002310:	080025cd 	.word	0x080025cd
 8002314:	080025cd 	.word	0x080025cd
 8002318:	080025cd 	.word	0x080025cd
 800231c:	080025cd 	.word	0x080025cd
 8002320:	080025cd 	.word	0x080025cd
 8002324:	080025cd 	.word	0x080025cd
 8002328:	080025cd 	.word	0x080025cd
 800232c:	080025cd 	.word	0x080025cd
 8002330:	080025cd 	.word	0x080025cd
 8002334:	080025cd 	.word	0x080025cd
 8002338:	080025cd 	.word	0x080025cd
 800233c:	080025cd 	.word	0x080025cd
 8002340:	080025cd 	.word	0x080025cd
 8002344:	080025cd 	.word	0x080025cd
 8002348:	080025cd 	.word	0x080025cd
 800234c:	080024b1 	.word	0x080024b1
 8002350:	080025cd 	.word	0x080025cd
 8002354:	080025cd 	.word	0x080025cd
 8002358:	080025cd 	.word	0x080025cd
 800235c:	080025cd 	.word	0x080025cd
 8002360:	080025cd 	.word	0x080025cd
 8002364:	080025cd 	.word	0x080025cd
 8002368:	080025cd 	.word	0x080025cd
 800236c:	080025cd 	.word	0x080025cd
 8002370:	080025cd 	.word	0x080025cd
 8002374:	080025cd 	.word	0x080025cd
 8002378:	08002405 	.word	0x08002405
 800237c:	0800241d 	.word	0x0800241d
 8002380:	080025cd 	.word	0x080025cd
 8002384:	080025cd 	.word	0x080025cd
 8002388:	080025cd 	.word	0x080025cd
 800238c:	080025cd 	.word	0x080025cd
 8002390:	0800241d 	.word	0x0800241d
 8002394:	080025cd 	.word	0x080025cd
 8002398:	080025cd 	.word	0x080025cd
 800239c:	080025cd 	.word	0x080025cd
 80023a0:	080025cd 	.word	0x080025cd
 80023a4:	080025cd 	.word	0x080025cd
 80023a8:	080025cd 	.word	0x080025cd
 80023ac:	080024b1 	.word	0x080024b1
 80023b0:	080025cd 	.word	0x080025cd
 80023b4:	080025cd 	.word	0x080025cd
 80023b8:	08002447 	.word	0x08002447
 80023bc:	080025cd 	.word	0x080025cd
 80023c0:	08002499 	.word	0x08002499
 80023c4:	080025cd 	.word	0x080025cd
 80023c8:	080025cd 	.word	0x080025cd
 80023cc:	080024b1 	.word	0x080024b1
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b30      	cmp	r3, #48	@ 0x30
 80023d8:	d105      	bne.n	80023e6 <UARTvprintf+0x1d6>
 80023da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <UARTvprintf+0x1d6>
                    {
                        cFill = '0';
 80023e0:	2330      	movs	r3, #48	@ 0x30
 80023e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 80023e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    ui32Count += pcString[-1] - '0';
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	3b30      	subs	r3, #48	@ 0x30
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    //
                    // Get the next character.
                    //
                    goto again;
 8002402:	e732      	b.n	800226a <UARTvprintf+0x5a>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	603a      	str	r2, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]

                    //
                    // Print out the character.
                    //
                    UARTwrite((char *)&ui32Value, 1);
 800240e:	f107 0318 	add.w	r3, r7, #24
 8002412:	2101      	movs	r1, #1
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe8f 	bl	8002138 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800241a:	e0dd      	b.n	80025d8 <UARTvprintf+0x3c8>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	1d1a      	adds	r2, r3, #4
 8002420:	603a      	str	r2, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da05      	bge.n	800243c <UARTvprintf+0x22c>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	425b      	negs	r3, r3
 8002434:	61bb      	str	r3, [r7, #24]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	e001      	b.n	8002440 <UARTvprintf+0x230>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8002440:	230a      	movs	r3, #10
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8002444:	e03f      	b.n	80024c6 <UARTvprintf+0x2b6>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	1d1a      	adds	r2, r3, #4
 800244a:	603a      	str	r2, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61fb      	str	r3, [r7, #28]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 8002450:	2300      	movs	r3, #0
 8002452:	637b      	str	r3, [r7, #52]	@ 0x34
 8002454:	e002      	b.n	800245c <UARTvprintf+0x24c>
 8002456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002458:	3301      	adds	r3, #1
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	4413      	add	r3, r2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f6      	bne.n	8002456 <UARTvprintf+0x246>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcStr, ui32Idx);
 8002468:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800246a:	69f8      	ldr	r0, [r7, #28]
 800246c:	f7ff fe64 	bl	8002138 <UARTwrite>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 8002470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002474:	429a      	cmp	r2, r3
 8002476:	f240 80ae 	bls.w	80025d6 <UARTvprintf+0x3c6>
                    {
                        ui32Count -= ui32Idx;
 800247a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800247c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        while(ui32Count--)
 8002482:	e003      	b.n	800248c <UARTvprintf+0x27c>
                        {
                            UARTwrite(" ", 1);
 8002484:	2101      	movs	r1, #1
 8002486:	4859      	ldr	r0, [pc, #356]	@ (80025ec <UARTvprintf+0x3dc>)
 8002488:	f7ff fe56 	bl	8002138 <UARTwrite>
                        while(ui32Count--)
 800248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248e:	1e5a      	subs	r2, r3, #1
 8002490:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f6      	bne.n	8002484 <UARTvprintf+0x274>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8002496:	e09e      	b.n	80025d6 <UARTvprintf+0x3c6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	603a      	str	r2, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 80024a6:	230a      	movs	r3, #10
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80024ae:	e00a      	b.n	80024c6 <UARTvprintf+0x2b6>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	1d1a      	adds	r2, r3, #4
 80024b4:	603a      	str	r2, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 80024be:	2310      	movs	r3, #16
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ca:	e007      	b.n	80024dc <UARTvprintf+0x2cc>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 80024cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d8:	3b01      	subs	r3, #1
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 80024dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024e0:	fb03 f202 	mul.w	r2, r3, r2
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d809      	bhi.n	80024fe <UARTvprintf+0x2ee>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 80024ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ee:	fb03 f202 	mul.w	r2, r3, r2
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 80024f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d0e6      	beq.n	80024cc <UARTvprintf+0x2bc>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <UARTvprintf+0x2fa>
                    {
                        ui32Count--;
 8002504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002506:	3b01      	subs	r3, #1
 8002508:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00d      	beq.n	800252c <UARTvprintf+0x31c>
 8002510:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002514:	2b30      	cmp	r3, #48	@ 0x30
 8002516:	d109      	bne.n	800252c <UARTvprintf+0x31c>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	633a      	str	r2, [r7, #48]	@ 0x30
 800251e:	3338      	adds	r3, #56	@ 0x38
 8002520:	443b      	add	r3, r7
 8002522:	222d      	movs	r2, #45	@ 0x2d
 8002524:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 800252c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d915      	bls.n	800255e <UARTvprintf+0x34e>
 8002532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d812      	bhi.n	800255e <UARTvprintf+0x34e>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 8002538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253a:	3b01      	subs	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800253e:	e00b      	b.n	8002558 <UARTvprintf+0x348>
                        {
                            pcBuf[ui32Pos++] = cFill;
 8002540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	633a      	str	r2, [r7, #48]	@ 0x30
 8002546:	3338      	adds	r3, #56	@ 0x38
 8002548:	443b      	add	r3, r7
 800254a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800254e:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 8002552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002554:	3b01      	subs	r3, #1
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <UARTvprintf+0x330>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <UARTvprintf+0x39a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	633a      	str	r2, [r7, #48]	@ 0x30
 800256a:	3338      	adds	r3, #56	@ 0x38
 800256c:	443b      	add	r3, r7
 800256e:	222d      	movs	r2, #45	@ 0x2d
 8002570:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8002574:	e019      	b.n	80025aa <UARTvprintf+0x39a>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8002576:	481e      	ldr	r0, [pc, #120]	@ (80025f0 <UARTvprintf+0x3e0>)
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002582:	fbb3 f2f2 	udiv	r2, r3, r2
 8002586:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002588:	fb01 f202 	mul.w	r2, r1, r2
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	6339      	str	r1, [r7, #48]	@ 0x30
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8002596:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 8002598:	3338      	adds	r3, #56	@ 0x38
 800259a:	443b      	add	r3, r7
 800259c:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 80025a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e2      	bne.n	8002576 <UARTvprintf+0x366>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcBuf, ui32Pos);
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fdbe 	bl	8002138 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 80025bc:	e00c      	b.n	80025d8 <UARTvprintf+0x3c8>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UARTwrite(pcString - 1, 1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fdb7 	bl	8002138 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 80025ca:	e005      	b.n	80025d8 <UARTvprintf+0x3c8>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UARTwrite("ERROR", 5);
 80025cc:	2105      	movs	r1, #5
 80025ce:	4809      	ldr	r0, [pc, #36]	@ (80025f4 <UARTvprintf+0x3e4>)
 80025d0:	f7ff fdb2 	bl	8002138 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 80025d4:	e000      	b.n	80025d8 <UARTvprintf+0x3c8>
                    break;
 80025d6:	bf00      	nop
    while(*pcString)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f ae1d 	bne.w	800221c <UARTvprintf+0xc>
                }
            }
        }
    }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3738      	adds	r7, #56	@ 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08002908 	.word	0x08002908
 80025f0:	080028f4 	.word	0x080028f4
 80025f4:	0800290c 	.word	0x0800290c

080025f8 <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
 80025f8:	b40f      	push	{r0, r1, r2, r3}
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	607b      	str	r3, [r7, #4]

    UARTvprintf(pcString, vaArgP);
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	6938      	ldr	r0, [r7, #16]
 800260a:	f7ff fe01 	bl	8002210 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002618:	b004      	add	sp, #16
 800261a:	4770      	bx	lr

0800261c <UARTFlushRx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushRx(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0


    //
    // Temporarily turn off interrupts.
    //
    LL_USART_DisableIT_RXNE(stdUsart);
 8002620:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <UARTFlushRx+0x28>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fcab 	bl	8001f80 <LL_USART_DisableIT_RXNE>

    //
    // Flush the receive buffer.
    //
    g_ui32UARTRxReadIndex = 0;
 800262a:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <UARTFlushRx+0x2c>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
    g_ui32UARTRxWriteIndex = 0;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <UARTFlushRx+0x30>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
    //
    // If interrupts were enabled when we turned them off, turn them
    // back on again.
    //

      LL_USART_EnableIT_RXNE(stdUsart);
 8002636:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <UARTFlushRx+0x28>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fc5c 	bl	8001ef8 <LL_USART_EnableIT_RXNE>

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200049dc 	.word	0x200049dc
 8002648:	200049d8 	.word	0x200049d8
 800264c:	200049d4 	.word	0x200049d4

08002650 <UARTFlushTx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushTx(bool bDiscard)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]


    //
    // Should the remaining data be discarded or transmitted?
    //
    if(bDiscard)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <UARTFlushTx+0x28>
    {
        //
        // The remaining data should be discarded, so temporarily turn off
        // interrupts.
        //
         LL_USART_DisableIT_TXE(stdUsart);
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <UARTFlushTx+0x48>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fcad 	bl	8001fc4 <LL_USART_DisableIT_TXE>

        //
        // Flush the transmit buffer.
        //

        g_ui32UARTTxReadIndex = 0;
 800266a:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <UARTFlushTx+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
        g_ui32UARTTxWriteIndex = 0;
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <UARTFlushTx+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
        //
        while(!TX_BUFFER_EMPTY)
        {
        }
    }
}
 8002676:	e00a      	b.n	800268e <UARTFlushTx+0x3e>
        while(!TX_BUFFER_EMPTY)
 8002678:	bf00      	nop
 800267a:	4909      	ldr	r1, [pc, #36]	@ (80026a0 <UARTFlushTx+0x50>)
 800267c:	4807      	ldr	r0, [pc, #28]	@ (800269c <UARTFlushTx+0x4c>)
 800267e:	f7ff fcf1 	bl	8002064 <IsBufferEmpty>
 8002682:	4603      	mov	r3, r0
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f5      	bne.n	800267a <UARTFlushTx+0x2a>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200049dc 	.word	0x200049dc
 800269c:	20004950 	.word	0x20004950
 80026a0:	2000494c 	.word	0x2000494c

080026a4 <UARTStdioIntHandler>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTStdioIntHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
	static int8_t bLastWasCR = 0;
	  uint32_t isrflags   = READ_REG(stdUsart->SR);
 80026aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002814 <UARTStdioIntHandler+0x170>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
	  uint32_t cr1its     = READ_REG(stdUsart->CR1);
 80026b2:	4b58      	ldr	r3, [pc, #352]	@ (8002814 <UARTStdioIntHandler+0x170>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]

	    /*If interrupt is caused due to Transmit Data Register Empty */
	    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d024      	beq.n	800270e <UARTStdioIntHandler+0x6a>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01f      	beq.n	800270e <UARTStdioIntHandler+0x6a>
	    {
	    	if(TX_BUFFER_EMPTY)
 80026ce:	4952      	ldr	r1, [pc, #328]	@ (8002818 <UARTStdioIntHandler+0x174>)
 80026d0:	4852      	ldr	r0, [pc, #328]	@ (800281c <UARTStdioIntHandler+0x178>)
 80026d2:	f7ff fcc7 	bl	8002064 <IsBufferEmpty>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <UARTStdioIntHandler+0x44>
	    	    {
	    	      // Buffer empty, so disable interrupts
	    	      LL_USART_DisableIT_TXE(stdUsart);
 80026dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <UARTStdioIntHandler+0x170>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fc6f 	bl	8001fc4 <LL_USART_DisableIT_TXE>
 80026e6:	e012      	b.n	800270e <UARTStdioIntHandler+0x6a>

	    	 else
	    	    {
	    	      // There is more data in the output buffer. Send the next byte

	    		 	 unsigned char c = g_pcUARTTxBuffer[g_ui32UARTTxReadIndex];
 80026e8:	4b4c      	ldr	r3, [pc, #304]	@ (800281c <UARTStdioIntHandler+0x178>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002820 <UARTStdioIntHandler+0x17c>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	71fb      	strb	r3, [r7, #7]
	    		 	 ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 80026f2:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <UARTStdioIntHandler+0x178>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	4a47      	ldr	r2, [pc, #284]	@ (800281c <UARTStdioIntHandler+0x178>)
 80026fe:	6013      	str	r3, [r2, #0]
	    	      *          USART_SR register followed by a write operation to USART_DR register.
	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

	    	      *********************/

	    	      stdUsart->SR;
 8002700:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <UARTStdioIntHandler+0x170>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
	    	      stdUsart->DR = c;
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <UARTStdioIntHandler+0x170>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	605a      	str	r2, [r3, #4]
	    }
    //
    // Are we being interrupted due to a received character?
    //
	    /* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d079      	beq.n	800280c <UARTStdioIntHandler+0x168>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d074      	beq.n	800280c <UARTStdioIntHandler+0x168>

        {
            //
            // Read a character
            //
        	stdUsart->SR;
 8002722:	4b3c      	ldr	r3, [pc, #240]	@ (8002814 <UARTStdioIntHandler+0x170>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
            unsigned char cChar = stdUsart->DR;
 8002728:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <UARTStdioIntHandler+0x170>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	71bb      	strb	r3, [r7, #6]
            //
            // If echo is disabled, we skip the various text filtering
            // operations that would typically be required when supporting a
            // command line.
            //
            if(!g_bDisableEcho)
 8002732:	4b3c      	ldr	r3, [pc, #240]	@ (8002824 <UARTStdioIntHandler+0x180>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	f083 0301 	eor.w	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03d      	beq.n	80027bc <UARTStdioIntHandler+0x118>
            {
                //
                // Handle backspace by erasing the last character in the
                // buffer.
                //
                if(cChar == '\b')
 8002740:	79bb      	ldrb	r3, [r7, #6]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11a      	bne.n	800277c <UARTStdioIntHandler+0xd8>
                {
                    //
                    // If there are any characters already in the buffer, then
                    // delete the last.
                    //
                    if(!RX_BUFFER_EMPTY)
 8002746:	4938      	ldr	r1, [pc, #224]	@ (8002828 <UARTStdioIntHandler+0x184>)
 8002748:	4838      	ldr	r0, [pc, #224]	@ (800282c <UARTStdioIntHandler+0x188>)
 800274a:	f7ff fc8b 	bl	8002064 <IsBufferEmpty>
 800274e:	4603      	mov	r3, r0
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <UARTStdioIntHandler+0xd8>
                    {
                        //
                        // Rub out the previous character on the users
                        // terminal.
                        //
                        UARTwrite("\b \b", 3);
 800275a:	2103      	movs	r1, #3
 800275c:	4834      	ldr	r0, [pc, #208]	@ (8002830 <UARTStdioIntHandler+0x18c>)
 800275e:	f7ff fceb 	bl	8002138 <UARTwrite>

                        //
                        // Decrement the number of characters in the buffer.
                        //
                        if(g_ui32UARTRxWriteIndex == 0)
 8002762:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <UARTStdioIntHandler+0x184>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <UARTStdioIntHandler+0xce>
                        {
                            g_ui32UARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
 800276a:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <UARTStdioIntHandler+0x184>)
 800276c:	227f      	movs	r2, #127	@ 0x7f
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e004      	b.n	800277c <UARTStdioIntHandler+0xd8>
                        }
                        else
                        {
                            g_ui32UARTRxWriteIndex--;
 8002772:	4b2d      	ldr	r3, [pc, #180]	@ (8002828 <UARTStdioIntHandler+0x184>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3b01      	subs	r3, #1
 8002778:	4a2b      	ldr	r2, [pc, #172]	@ (8002828 <UARTStdioIntHandler+0x184>)
 800277a:	6013      	str	r3, [r2, #0]
                // If this character is LF and last was CR, then just gobble up
                // the character since we already echoed the previous CR and we
                // don't want to store 2 characters in the buffer if we don't
                // need to.
                //
                if((cChar == '\n') && bLastWasCR)
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	2b0a      	cmp	r3, #10
 8002780:	d107      	bne.n	8002792 <UARTStdioIntHandler+0xee>
 8002782:	4b2c      	ldr	r3, [pc, #176]	@ (8002834 <UARTStdioIntHandler+0x190>)
 8002784:	f993 3000 	ldrsb.w	r3, [r3]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <UARTStdioIntHandler+0xee>
                {
                    bLastWasCR = false;
 800278c:	4b29      	ldr	r3, [pc, #164]	@ (8002834 <UARTStdioIntHandler+0x190>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
                }

                //
                // See if a newline or escape character was received.
                //
                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
 8002792:	79bb      	ldrb	r3, [r7, #6]
 8002794:	2b0d      	cmp	r3, #13
 8002796:	d005      	beq.n	80027a4 <UARTStdioIntHandler+0x100>
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d002      	beq.n	80027a4 <UARTStdioIntHandler+0x100>
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	2b1b      	cmp	r3, #27
 80027a2:	d10b      	bne.n	80027bc <UARTStdioIntHandler+0x118>
                    //
                    // If the character is a CR, then it may be followed by an
                    // LF which should be paired with the CR.  So remember that
                    // a CR was received.
                    //
                    if(cChar == '\r')
 80027a4:	79bb      	ldrb	r3, [r7, #6]
 80027a6:	2b0d      	cmp	r3, #13
 80027a8:	d102      	bne.n	80027b0 <UARTStdioIntHandler+0x10c>
                    {
                        bLastWasCR = 1;
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <UARTStdioIntHandler+0x190>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
                    // put a CR in the receive buffer as a marker telling
                    // UARTgets() where the line ends.  We also send an
                    // additional LF to ensure that the local terminal echo
                    // receives both CR and LF.
                    //
                    cChar = '\r';
 80027b0:	230d      	movs	r3, #13
 80027b2:	71bb      	strb	r3, [r7, #6]
                    UARTwrite("\n", 1);
 80027b4:	2101      	movs	r1, #1
 80027b6:	4820      	ldr	r0, [pc, #128]	@ (8002838 <UARTStdioIntHandler+0x194>)
 80027b8:	f7ff fcbe 	bl	8002138 <UARTwrite>

            //
            // If there is space in the receive buffer, put the character
            // there, otherwise throw it away.
            //
            if(!RX_BUFFER_FULL)
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	491a      	ldr	r1, [pc, #104]	@ (8002828 <UARTStdioIntHandler+0x184>)
 80027c0:	481a      	ldr	r0, [pc, #104]	@ (800282c <UARTStdioIntHandler+0x188>)
 80027c2:	f7ff fc2f 	bl	8002024 <IsBufferFull>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d017      	beq.n	8002802 <UARTStdioIntHandler+0x15e>
            {
                //
                // Store the new character in the receive buffer
                //
                g_pcUARTRxBuffer[g_ui32UARTRxWriteIndex] =
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <UARTStdioIntHandler+0x184>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	79b9      	ldrb	r1, [r7, #6]
 80027d8:	4a18      	ldr	r2, [pc, #96]	@ (800283c <UARTStdioIntHandler+0x198>)
 80027da:	54d1      	strb	r1, [r2, r3]
                    (unsigned char)(cChar & 0xFF);
                ADVANCE_RX_BUFFER_INDEX(g_ui32UARTRxWriteIndex);
 80027dc:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <UARTStdioIntHandler+0x184>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027e6:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <UARTStdioIntHandler+0x184>)
 80027e8:	6013      	str	r3, [r2, #0]

                //
                // If echo is enabled, write the character to the transmit
                // buffer so that the user gets some immediate feedback.
                //
                if(!g_bDisableEcho)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <UARTStdioIntHandler+0x180>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	f083 0301 	eor.w	r3, r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <UARTStdioIntHandler+0x15e>
                {
                    UARTwrite((const char *)&cChar, 1);
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fc9b 	bl	8002138 <UARTwrite>

        //
        // If we wrote anything to the transmit buffer, make sure it actually
        // gets transmitted.
        //
        UARTPrimeTransmit(stdUsart);
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <UARTStdioIntHandler+0x170>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fc44 	bl	8002094 <UARTPrimeTransmit>

    }
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200049dc 	.word	0x200049dc
 8002818:	2000494c 	.word	0x2000494c
 800281c:	20004950 	.word	0x20004950
 8002820:	2000454c 	.word	0x2000454c
 8002824:	20004548 	.word	0x20004548
 8002828:	200049d4 	.word	0x200049d4
 800282c:	200049d8 	.word	0x200049d8
 8002830:	08002914 	.word	0x08002914
 8002834:	200049e0 	.word	0x200049e0
 8002838:	08002918 	.word	0x08002918
 800283c:	20004954 	.word	0x20004954

08002840 <memset>:
 8002840:	4603      	mov	r3, r0
 8002842:	4402      	add	r2, r0
 8002844:	4293      	cmp	r3, r2
 8002846:	d100      	bne.n	800284a <memset+0xa>
 8002848:	4770      	bx	lr
 800284a:	f803 1b01 	strb.w	r1, [r3], #1
 800284e:	e7f9      	b.n	8002844 <memset+0x4>

08002850 <__libc_init_array>:
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	2600      	movs	r6, #0
 8002854:	4d0c      	ldr	r5, [pc, #48]	@ (8002888 <__libc_init_array+0x38>)
 8002856:	4c0d      	ldr	r4, [pc, #52]	@ (800288c <__libc_init_array+0x3c>)
 8002858:	1b64      	subs	r4, r4, r5
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	42a6      	cmp	r6, r4
 800285e:	d109      	bne.n	8002874 <__libc_init_array+0x24>
 8002860:	f000 f81a 	bl	8002898 <_init>
 8002864:	2600      	movs	r6, #0
 8002866:	4d0a      	ldr	r5, [pc, #40]	@ (8002890 <__libc_init_array+0x40>)
 8002868:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <__libc_init_array+0x44>)
 800286a:	1b64      	subs	r4, r4, r5
 800286c:	10a4      	asrs	r4, r4, #2
 800286e:	42a6      	cmp	r6, r4
 8002870:	d105      	bne.n	800287e <__libc_init_array+0x2e>
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	f855 3b04 	ldr.w	r3, [r5], #4
 8002878:	4798      	blx	r3
 800287a:	3601      	adds	r6, #1
 800287c:	e7ee      	b.n	800285c <__libc_init_array+0xc>
 800287e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002882:	4798      	blx	r3
 8002884:	3601      	adds	r6, #1
 8002886:	e7f2      	b.n	800286e <__libc_init_array+0x1e>
 8002888:	08002934 	.word	0x08002934
 800288c:	08002934 	.word	0x08002934
 8002890:	08002934 	.word	0x08002934
 8002894:	08002938 	.word	0x08002938

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
